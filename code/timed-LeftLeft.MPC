\ SoftCR data is recorded in Relative Mode with a 10ms Resolution.
 
\  SoftCR Data Elements Used/Meaning (Array C)
\   .10     = Correct Response
\   .20     = Reinforcement Issued
\   .60/.50 = Incorrect Response
\   .61     = Start of Time Out
\   .51     = End   of Time Out
\\ <MJ.> task specific codes
\   .65/.50     = Incorrect Right
\   .66/.50     = Incorrect Left (low time)
\   .67/.50     = Incorrect Left (high time)
\   .68/.50     = Incorrect - Press Left during timeout
\   .69/.50     = Incorrect - Press Right during timeout

\ Inputs
^LeftLever  = 1
^RightLever = 2

\ Outputs
^Pellet     = 3
^Dipper     = 3
^LeftLight  = 4
^RightLight = 5
^HouseLight = 7
^Pump       = 8

\ A() = Control Variables with Assigned Aliases as Defined
Var_Alias First  Correct Lever (1=Left  2=Right)            = A(0)  \ Default = 1-Left Lever
Var_Alias Second Correct Lever (1=Left  2=Right)            = A(1)  \ Default = 2-Right Lever
Var_Alias Reinforcement Device (1=Pellet  2=Dipper  3=Drug) = A(2)  \ Default = 1-Pellet
Var_Alias Reinforcement Time (sec)                          = A(3)  \ Default = 0.05 seconds
Var_Alias Time Out Following Reinforcement (sec)            = A(4)  \ Default = 0 seconds
Var_Alias Session Time (min)                                = A(5)  \ Default = 60 minutes
Var_Alias First  Fixed Ratio Value                          = A(6)  \ Default = 1
Var_Alias Second Fixed Ratio Value                          = A(7)  \ Default = 5
Var_Alias Maximum Reinforcers                               = A(8)  \ Default = 50
Var_Alias SoftCR Data Array (1=Yes  0=No)                   = A(9)  \ Default = 1-Yes
\ <MJ.> task specific Var_Alias
Var_Alias Timeout Low (ms)                                  = A(12)
Var_Alias Timeout High (ms)                                 = A(13)

\ Constants for Control Variables Array
^CorrectLev1     = 0
\^CorrectLev2     = 1
^ReinforceDevice = 2
^ReinforceTime   = 3
^TimeOut         = 4
^SessionTime     = 5
^FRVal1          = 6
^FRVal2          = 7
^MaxReinf        = 8
^SoftCR          = 9
^ReinforceTicks = 10
^TimeOutTicks   = 11
\MJ.
^TimeoutLow     = 12
^TimeoutHigh    = 13
^TimeoutLowTicks = 14
^TimeoutHighTicks = 15

\ List Data Variables Here
\  B() = Trial by Trial Data Array - 1st FR
\  B(0)   = Total Responses
\  B(1)   = Total Correct Responses
\  B(2)   = Total Incorrect Responses
\  B(3)   = % Correct
\  B(4)   = % Incorrect
\  B(J)   = Trial Number
\  B(J+1) = Correct Responses
\  B(J+2) = Incorrect Responses
\  B(J+3) = Not Used
\  B(J+4) = Not Used

\  D() = Trial by Trial Data Array - 2nd FR
\  D(0)   = Total Responses
\  D(1)   = Total Correct Responses
\  D(2)   = Total Incorrect Responses
\  D(3)   = % Correct
\  D(4)   = % Incorrect
\  D(J)   = Trial Number
\  D(J+1) = Correct Responses
\  D(J+2) = Incorrect Responses
\  D(J+3) = Not Used
\  D(J+4) = Not Used
\
\  C() = IRT Array and Event Pen Code for Soft Cum. Recorder
\  F   = Total Reinforcements
\  S   = Elapsed Time in Session


\ List Working Variables Here
\  I = Subscript for the IRT Array C
\  J = Subscript for the Trial by Trial Data Arrays B & D
\  R = Ratio Counter
\  T = Elapsed Time in 0.01 sec Increments for SoftCR Data
\  X = Trial Counter


DIM A = 15 \<MJ.> was 11
DIM B = 1000

^CArraySize = 10000  \ Change this Variable also when modifying the C array size.
DIM C = 10000  \ Dimension Array C for 10001 data points.
               \ Under MED-PC Version IV, this array may be
               \ enlarged up to 1 million elements; however,
               \ 10,000 was felt to be adequate for this application.
               \ An end of array seal -987.987 will limit the saved
               \ file to only those elements used during the running
               \ of the procedure.
DIM D = 1000

\ Z-Pulses Used in this Program
^Z_Pellet     = 1   \ Signal Pellet Reinforcement
^Z_Dipper     = 2   \ Signal Dipper Reinforcement
^Z_Pump       = 3   \ Signal Pump Reinforcement
^Z_Correct1   = 4   \ Signal Correct   First Response
\  ^Z_Incorrect1 = 5   \ Signal Incorrect First Response
^Z_EndTimeOut = 6   \ Signal End of Time Out
\  ^Z_Correct2   = 7   \ Signal Correct   Second Response
\  ^Z_Incorrect2 = 8   \ Signal Incorrect Second Response
^Z_End        = 32  \ Signal End of Session

\<MJ.> Task specific Z-Pulses
^Z_Correct2 = 5  \ <MJ.> Correct second L was pressed at right time
^Z_IncorrectLLT = 7 \ <MJ.> Incorrect L low time
^Z_IncorrectLHT = 8 \ <MJ.> Incorrect L hight time
^Z_IncorrectR = 9  \ <MJ.> Incorrect R was pressed
^Z_IncorrectTL = 10 \ <MJ.> Presses in  timeout after wrong answer
^Z_IncorrectTR = 11 \ <MJ.> Presses in  timeout after wrong answer

S.S.1,
S1,
  0.01": SET A(^CorrectLev1)   = 1,  A(^ReinforceDevice) = 1;
         SET A(^ReinforceTime) = 0.05, A(^TimeOut)     = 0, A(^SessionTime)     = 60;
         SET A(^FRVal1)        = 2,    A(^FRVal2)      = 1, A(^MaxReinf)        = 50;
         SET A(^SoftCR)        = 1;
         SET A(^TimeoutLow) = 1, A(^TimeoutHigh) = 1;
         SET J    = 5;
         SET B(J) = -987.987;         \ Seal Arrays
         SET C(0) = -987.987;
         SET D(J) = -987.987 ---> S2

S2,     \ First Statement: Wait for START signal.
        \
        \ Second Statement: Update screen display with default values
        \ for Control Variables.  This will show any changes made via
        \ the "Configure | Change Variables" Window prior to START.
  #START: CLEAR 1,200;
          SET A(^ReinforceTicks) = A(^ReinforceTime) * 1";
          SET A(^TimeOutTicks)   = A(^TimeOut)       * 1";
          SET A(^TimeoutLowTicks) = A(^TimeoutLow)   * 1";
          SET A(^TimeoutHighTicks) = A(^TimeoutHigh)   * 1";
          ADD X; SET B(J) = X, B(J+5) = -987.987;
          SET        D(J) = X, D(J+5) = -987.987;
          SHOW 1,Session,S/60 ---> S3
  1": SHOW 1,1st Cor Lever,A(^CorrectLev1), 2,Reinforcement Device,A(^ReinforceDevice), 3,Reinforce Time,A(^ReinforceTime);
      SHOW 4,Time Out,A(^TimeOut),          5,Session Time,A(^SessionTime),             6,1st FR Value,A(^FRVal1);
      SHOW 7,Max Reinforcers,A(^MaxReinf),  8,SoftCR Code,A(^SoftCR);
      SHOW 10,2nd FR Value,A(^FRVal2);
      SHOW 11,Timeout Low,A(^TimeoutLow), 12,Timeout High,A(^TimeoutHigh) ---> SX

S3,
  1": ADD S; SHOW 1,Session,S/60;
      IF S/60 >= A(^SessionTime) [@EndSession, @ContinueTiming]
         @End: Z^Z_End ---> S4
         @Cont: ---> SX
  #Z^Z_End: ---> S4

S4,     \ Finalize the SoftCR Data Array
  0.01": IF A(^SoftCR) > 0 [@SoftCR, @NoSoftCR]
            @SoftCR: IF I <= ^CArraySize [@True, @False]
                        @True: SET C(I) = T + 0.30; ADD I;
                               IF I <= ^CArraySize [@True, @False]
                                  @True: SET C(I) = -987.987 ---> S5
                                  @False: ---> S5
                        @False: ---> S5
            @NoSoftCR: ---> S5

S5,     \ Wait for Screen Update and end with
        \ STOPABORTFLUSH for Automatic Data Saving
  2": ---> STOPABORTFLUSH


\***************************************************
\                   MAIN PROGRAM
\***************************************************
S.S.2,
S1,     \ Turn HouseLight and associated stimulus ON
  #START:  ON ^HouseLight, ^LeftLight  ---> S2

S2, \ press left
  #R^LeftLever: ON ^RightLight; Z^Z_Correct1;---> S3 \ to low time state
  #R^RightLever: Z^Z_IncorrectR;  ---> S6 \ to bad state 
  #Z^Z_End:                     ---> S15

\low time state
S3,
  #R^LeftLever: Z^Z_IncorrectLLT, ---> S6 \ to bad state
  #R^RightLever: Z^Z_IncorrectR ---> S6 \ to bad state
  A(^TimeoutLowTicks)#T: OFF ^RightLight ---> S4 \ to best time state
  #Z^Z_End:                     ---> S15

\best time state
S4,
 #R^LeftLever: Z^Z_Correct2; ZA(^ReinforceDevice); OFF ^HouseLight; ---> S10 \ to reinforcement state
 #R^RightLever: Z^Z_IncorrectR ---> S6
 A(^TimeoutHighTicks)#T: ON ^RightLight ---> S5 \ to high time state
 #Z^Z_End:                     ---> S15

\high time state
S5,
  #R^LeftLever: Z^Z_IncorrectLHT ---> S6 \ to bad state
  #R^RightLever: Z^Z_IncorrectR ---> S6 \ to bad state
  #Z^Z_End:                     ---> S15

S6, \ turn off lights  - Bad state 1
  0.01": OFF ^HouseLight, ^LeftLight, ^RightLight ---> S7
  #Z^Z_End:                     ---> S15

S7, \turn on lights after 5" - Bad state 2
  #R^LeftLever: Z^Z_IncorrectTL ---> SX \ stay here
  #R^RightLever: Z^Z_IncorrectTR ---> SX \ stay here
  5": ADD X; ON ^HouseLight, ^LeftLight; OFF ^RightLight  ---> S2
  #Z^Z_End:                     ---> S15

S10, \ reinforcement state
  \MJ. count presses during reinf. timeout
  #R^LeftLever: Z^Z_IncorrectTL ---> SX \ stay here
  #R^RightLever: Z^Z_IncorrectTR ---> SX \ stay here

  A(^TimeOutTicks)#T: Z^Z_EndTimeOut;
                      IF F >= A(^MaxReinf) [@End, @Cont]
                         @End: Z^Z_End ---> S15
                         @Cont: ADD X; ON ^HouseLight, ^LeftLight ---> S2
  #Z^Z_End: ---> S15


S15,     \ End of Session - Turn Lights Off
        \ Calculate % Correct and % Incorrect for 1st FR
  0.01": OFF ^HouseLight, ^LeftLight, ^RightLight; ---> S17

S17,     \ Holding State at End of Session
  1': ---> SX


\***************************************************
\               REINFORCEMENT COUNTER
\***************************************************
S.S.5,
S1,
  #START: ---> S2

S2,
  #ZA(^ReinforceDevice): ADD F ---> SX
  #Z^Z_End: ---> S1


\***************************************************
\                REINFORCEMENT TIMER
\***************************************************
S.S.6,
S1,
  #Z^Z_Pellet: ON ^Pellet ---> S2
  #Z^Z_Dipper: ON ^Dipper ---> S2
  #Z^Z_Pump:   ON ^Pump   ---> S2

S2,     \ Time Reinforcement Device for A(^ReinforceTime) seconds
        \ Default value set in S.S.1, S1 & S2
  A(^ReinforceTicks)#T: OFF ^Pellet, ^Dipper, ^Pump ---> S1
  #Z^Z_End:             OFF ^Pellet, ^Dipper, ^Pump ---> S1


\***************************************************
\     INCREMENT TIME T FOR IRT AND EVENT ARRAY
\***************************************************
S.S.8,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  0.01": ADD T ---> SX
  #Z^Z_End: ---> S1


\***********************************************************
\ ADD A STEP 0 ELEMENT TO ARRAY C FOR EACH CORRECT RESPONSE
\***********************************************************
S.S.9,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z^Z_Correct1: IF I <= ^CArraySize [@True, @False]
                    @True: SET C(I) = T + 0.10, T = 0; ADD I;
                           IF I <= ^CArraySize [@True, @False]
                              @True: SET C(I) = -987.987 ---> SX
                              @False: ---> S1
                    @False: ---> S1
  #Z^Z_Correct2: IF I <= ^CArraySize [@True, @False]
                    @True: SET C(I) = T + 0.10, T = 0; ADD I;
                           IF I <= ^CArraySize [@True, @False]
                              @True: SET C(I) = -987.987 ---> SX
                              @False: ---> S1
                    @False: ---> S1


\*******************************************************
\ ADD A PIP 0 ELEMENT TO ARRAY C FOR EACH REINFORCEMENT
\*******************************************************
S.S.10,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #ZA(^ReinforceDevice): IF I <= ^CArraySize [@True, @False]
                            @True: SET C(I) = T + 0.20, T = 0; ADD I;
                                   IF I <= ^CArraySize [@True, @False]
                                      @True: SET C(I) = -987.987 ---> SX
                                      @False: ---> S1
                            @False: ---> S1


\***************************************************************
\ ADD AN EVENT 0 ELEMENT TO ARRAY C FOR EACH INCORRECT RESPONSE
\       ADDITIONAL EVENT ELEMENTS MAY BE ADDED AS NEEDED
\***************************************************************
S.S.11,
S1,
  #START: IF A(^SoftCR) > 0 [@ActivateSoftCR, @NoSoftCR]
             @ActSoftCR: SET C(I) = 0.50, I = I + 1, C(I) = -987.987 ---> S2
             @NoSoftCR: ---> SX

S2,     \ Raising and lowering the Event line immediately
        \ will create a pip mark on the Event line
  #Z^Z_IncorrectR: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.65, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = 0.50; ADD I;
                                       IF I <= ^CArraySize [@True, @False]
                                          @True: SET C(I) = -987.987 ---> SX
                                          @False:---> S1
                                @False:---> S1
                      @False:---> S1
  #Z^Z_IncorrectLLT: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.66, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = 0.50; ADD I;
                                       IF I <= ^CArraySize [@True, @False]
                                          @True: SET C(I) = -987.987 ---> SX
                                          @False:---> S1
                                @False:---> S1
                      @False:---> S1
    #Z^Z_IncorrectLHT: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.67, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = 0.50; ADD I;
                                       IF I <= ^CArraySize [@True, @False]
                                          @True: SET C(I) = -987.987 ---> SX
                                          @False:---> S1
                                @False:---> S1
                      @False:---> S1
    #Z^Z_IncorrectTL: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.68, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = 0.50; ADD I;
                                       IF I <= ^CArraySize [@True, @False]
                                          @True: SET C(I) = -987.987 ---> SX
                                          @False:---> S1
                                @False:---> S1
                      @False:---> S1
    #Z^Z_IncorrectTR: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.69, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = 0.50; ADD I;
                                       IF I <= ^CArraySize [@True, @False]
                                          @True: SET C(I) = -987.987 ---> SX
                                          @False:---> S1
                                @False:---> S1
                      @False:---> S1

\   .65     = Incorrect Right
\   .66     = Incorrect Left (low time)
\   .67     = Incorrect Right (high time)
\   .68     = Incorrect - press Left n timeout
\   .69     = Incorrect - press Right n timeout


\****************************************************
\ ADD AN EVENT 1 ELEMENT TO ARRAY C FOR THE TIME OUT
\****************************************************
S.S.12,
S1,
  #START: IF A(^SoftCR) > 0 [@ActivateSoftCR, @NoSoftCR]
             @ActSoftCR: SET C(I) = 0.51, I = I + 1, C(I) = -987.987;
                         IF A(^TimeOut) > 0 [] ---> S2
             @NoSoftCR: ---> SX

S2,     \ Reinforcement was issued.  Time Out Begins
        \ Set Event Pen 1 Up
  #ZA(^ReinforceDevice): IF I <= ^CArraySize [@True, @False]
                            @True: SET C(I) = T + 0.61, T = 0; ADD I;
                                   IF I <= ^CArraySize [@True, @False]
                                      @True: SET C(I) = -987.987 ---> S3
                                      @False: ---> S1
                            @False: ---> S1

S3,     \ Time Out has Ended
        \ Set Event Pen 1 Down
  #Z^Z_EndTimeOut: IF I <= ^CArraySize [@True, @False]
                      @True: SET C(I) = T + 0.51, T = 0; ADD I;
                             IF I <= ^CArraySize [@True, @False]
                                @True: SET C(I) = -987.987 ---> S2
                                @False: ---> S1
                      @False: ---> S1




\***************************************************
\                  UPDATE DISPLAY
\***************************************************
S.S.13,
S1,
  #START: SHOW 2,1st Tot Cor Rsp,B(1),  3,1st Tot Incor Rsp,B(2), 4,Tot Reinf,F,          5,FR1=,A(^FRVal1);
          SHOW 6,Trial #,B(J),          7,1st Cor Rsp,B(J+1),     8,1st Incor Rsp,B(J+2), 10,FR2=,A(^FRVal2);
          SHOW 12,2nd Tot Cor Rsp,D(1), 13,2nd Tot Incor Rsp,D(2);
          SHOW 17,2nd Cor Rsp,D(J+1),   18,2nd Incor Rsp,D(J+2) ---> S2

S2,
  1": SHOW 2,1st Tot Cor Rsp,B(1),  3,1st Tot Incor Rsp,B(2), 4,Tot Reinf,F,          5,FR1=,A(^FRVal1);
      SHOW 6,Trial #,B(J),          7,1st Cor Rsp,B(J+1),     8,1st Incor Rsp,B(J+2), 10,FR2=,A(^FRVal2);
      SHOW 12,2nd Tot Cor Rsp,D(1), 13,2nd Tot Incor Rsp,D(2);
      SHOW 17,2nd Cor Rsp,D(J+1),   18,2nd Incor Rsp,D(J+2) ---> S2
